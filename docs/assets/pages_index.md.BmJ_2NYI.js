import{_ as n,c as a,o as p,ae as e}from"./chunks/framework.BUmXqw1y.js";const l="/docs/assets/img.Dy5SEmoC.png",i="/docs/assets/img_2.CEME2rHq.png",t="/docs/assets/img_1.BC4KeLfK.png",b=JSON.parse('{"title":"github pages 배포","description":"","frontmatter":{},"headers":[],"relativePath":"pages/index.md","filePath":"pages/index.md"}'),o={name:"pages/index.md"};function c(r,s,d,u,g,h){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="github-pages-배포" tabindex="-1">github pages 배포 <a class="header-anchor" href="#github-pages-배포" aria-label="Permalink to &quot;github pages 배포&quot;">​</a></h1><p>하나의 GitHub 저장소에서 여러 Vite 기반 앱을 서브 폴더 경로로 GitHub Pages에 배포하는 방법을 설명</p><h2 id="_1-프로젝트-구조" tabindex="-1">1. 프로젝트 구조 <a class="header-anchor" href="#_1-프로젝트-구조" aria-label="Permalink to &quot;1. 프로젝트 구조&quot;">​</a></h2><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>repo-root/</span></span>
<span class="line"><span>├── apps/</span></span>
<span class="line"><span>│   ├── app1/                   </span></span>
<span class="line"><span>│       └── vite.config.js      # config 설정</span></span>
<span class="line"><span>│   └── app2/                  </span></span>
<span class="line"><span>│       └── vite.config.js      # config 설정</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── packages/                   </span></span>
<span class="line"><span>│   └── ui/                </span></span>
<span class="line"><span>│       └── vitest.config.js      # config 설정 </span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── docs/                       </span></span>
<span class="line"><span>│   └── .vitepress/</span></span>
<span class="line"><span>│       └── config.js           # config 설정</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── .github/</span></span>
<span class="line"><span>│   └── workflows/</span></span>
<span class="line"><span>│       └── deploy.yml          # GitHub Actions 설정</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── .env                        # github domain base path 설정</span></span>
<span class="line"><span>├── .env.custom                 # custom domain base path 설정</span></span>
<span class="line"><span>└── package.json</span></span></code></pre></div><h2 id="_2-각-앱에-config-설정-base-경로-지정" tabindex="-1">2. 각 앱에 config 설정 (base 경로 지정) <a class="header-anchor" href="#_2-각-앱에-config-설정-base-경로-지정" aria-label="Permalink to &quot;2. 각 앱에 config 설정 (base 경로 지정)&quot;">​</a></h2><p>각 앱의 config.ts 또는 config.js에 base 경로를 지정해야 합니다. 예: apps/app1/vite.config.ts</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { defineConfig } from &#39;vite&#39;</span></span>
<span class="line"><span>import vue from &#39;@vitejs/plugin-vue&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default defineConfig({</span></span>
<span class="line"><span>  plugins: [vue()],</span></span>
<span class="line"><span>  base: &#39;/&lt;repositoryName&gt;/app1/&#39;, // 반드시 \`/repositoryName/appName/\`</span></span>
<span class="line"><span>})</span></span></code></pre></div><h2 id="github-actions-설정-deploy-yml" tabindex="-1">GitHub Actions 설정 (deploy.yml) <a class="header-anchor" href="#github-actions-설정-deploy-yml" aria-label="Permalink to &quot;GitHub Actions 설정 (deploy.yml)&quot;">​</a></h2><p>.github/workflows/deploy.yml 파일을 만들어 아래와 같이 설정합니다:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>name: Deploy GitHub Pages (multi-app)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>on:</span></span>
<span class="line"><span>  push:</span></span>
<span class="line"><span>    # \`master\` 브랜치를 대상으로 하는 푸시에서 실행됩니다.</span></span>
<span class="line"><span>    branches: [master]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>permissions:</span></span>
<span class="line"><span>  contents: write</span></span>
<span class="line"><span></span></span>
<span class="line"><span>jobs:</span></span>
<span class="line"><span>  deploy:</span></span>
<span class="line"><span>    runs-on: ubuntu-latest</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    steps:</span></span>
<span class="line"><span>      - name: Checkout</span></span>
<span class="line"><span>        uses: actions/checkout@v3</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      # PNPM &amp; Node</span></span>
<span class="line"><span>      - name: Setup Node</span></span>
<span class="line"><span>        uses: actions/setup-node@v3</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          node-version: &#39;18&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      - name: Install Dependencies (PNPM)</span></span>
<span class="line"><span>        uses: pnpm/action-setup@v2</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          version: 8</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      - run: pnpm install</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      # 빌드 전에 사용할 환경 변수를 세팅하는 단계</span></span>
<span class="line"><span>      - name: Copy custom env</span></span>
<span class="line"><span>        run: cp .env.custom .env</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      # ---------- app 개별 Build 단계 ----------</span></span>
<span class="line"><span>      # Build test (Vue)</span></span>
<span class="line"><span>      - name: Build test app</span></span>
<span class="line"><span>        run:  pnpm --filter test run build</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      # Build new-app (Vue)</span></span>
<span class="line"><span>      - name: Build new-app app</span></span>
<span class="line"><span>        run:  pnpm --filter new-app run build</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      # Build web (Vue)</span></span>
<span class="line"><span>      - name: Build web app</span></span>
<span class="line"><span>        run:  pnpm --filter web run build</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      # Build storybook</span></span>
<span class="line"><span>      - name: Build with Storybook</span></span>
<span class="line"><span>        run:  pnpm --filter @repo/ui build-storybook</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      # Build vitepress</span></span>
<span class="line"><span>      - name: Build with VitePress</span></span>
<span class="line"><span>        run:  pnpm vitepress build docs</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      # gh-pages에 올릴 구조 만들기</span></span>
<span class="line"><span>      - name: Compose gh-pages folder</span></span>
<span class="line"><span>        run: |</span></span>
<span class="line"><span>          rm -rf dist</span></span>
<span class="line"><span>          mkdir -p dist/test</span></span>
<span class="line"><span>          mkdir -p dist/new-app</span></span>
<span class="line"><span>          mkdir -p dist/web</span></span>
<span class="line"><span>          mkdir -p dist/storybook</span></span>
<span class="line"><span>          mkdir -p dist/docs</span></span>
<span class="line"><span>          cp -r apps/test/dist/* dist/test</span></span>
<span class="line"><span>          cp -r apps/new-app/dist/* dist/new-app</span></span>
<span class="line"><span>          cp -r apps/web/dist/* dist/web</span></span>
<span class="line"><span>          cp -r packages/ui/storybook-static/* dist/storybook</span></span>
<span class="line"><span>          cp -r docs/.vitepress/dist/* dist/docs</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      # ---------- GitHub Pages 배포 ----------</span></span>
<span class="line"><span>      - name: Deploy to gh-pages</span></span>
<span class="line"><span>        uses: peaceiris/actions-gh-pages@v3</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          github_token: \${{ secrets.GITHUB_TOKEN }}</span></span>
<span class="line"><span>          publish_branch: gh-pages</span></span>
<span class="line"><span>          publish_dir: ./dist</span></span>
<span class="line"><span>          cname: ux.team.gd #커스텀 도메인 설정</span></span></code></pre></div><h2 id="github-pages-설정-repository-설정" tabindex="-1">GitHub Pages 설정 (repository 설정) <a class="header-anchor" href="#github-pages-설정-repository-설정" aria-label="Permalink to &quot;GitHub Pages 설정 (repository 설정)&quot;">​</a></h2><ol><li>GitHub로 이동</li><li>Settings &gt; Pages 메뉴 이동</li><li>Source:</li></ol><ul><li>Deploy from a branch 선택</li></ul><ol start="4"><li>gh-pages 브랜치</li></ol><ul><li>루트 (/) 경로 선택</li></ul><p><img src="`+l+'" alt="img.png"></p><h2 id="배포-확인" tabindex="-1">배포 확인 <a class="header-anchor" href="#배포-확인" aria-label="Permalink to &quot;배포 확인&quot;">​</a></h2><p><img src="'+i+'" alt="img_2.png"><img src="'+t+'" alt="img_1.png"></p><p>git에 gh-pages 브랜치에 빌드된 파일들이 자동으로 업로드되고 배포됨.</p><h2 id="최종-접속-주소" tabindex="-1">최종 접속 주소 <a class="header-anchor" href="#최종-접속-주소" aria-label="Permalink to &quot;최종 접속 주소&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>기본 GitHub Pages 도메인과 커스텀 도메인을 동시에 사용할 수는 없음.</p><p>git domain을 사용하고 싶다면 deploy.yml에서 cname: ux.team.gd 부분 제거.</p></div><p>git domain</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://&lt;your-username&gt;.github.io/&lt;repositoryName&gt;/app1/</span></span></code></pre></div><ul><li><a href="https://mz-pos.github.io/ux/storybook/?path=/docs/example-button--docs" target="_blank" rel="noreferrer">https://mz-pos.github.io/ux/storybook/?path=/docs/example-button--docs</a></li><li><a href="https://mz-pos.github.io/ux/docs/getting-started.html" target="_blank" rel="noreferrer">https://mz-pos.github.io/ux/docs/getting-started.html</a></li><li><a href="https://mz-pos.github.io/ux/new-app/" target="_blank" rel="noreferrer">https://mz-pos.github.io/ux/new-app/</a></li></ul><p>or</p><p>custom domain</p><ul><li><a href="https://ux.team.gd/storybook/?path=/docs/example-button--docs" target="_blank" rel="noreferrer">https://ux.team.gd/storybook/?path=/docs/example-button--docs</a></li><li><a href="https://ux.team.gd/docs/getting-started.html" target="_blank" rel="noreferrer">https://ux.team.gd/docs/getting-started.html</a></li><li><a href="https://ux.team.gd/new-app/" target="_blank" rel="noreferrer">https://ux.team.gd/new-app/</a></li></ul>',27)]))}const f=n(o,[["render",c]]);export{b as __pageData,f as default};
